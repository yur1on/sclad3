document.addEventListener('DOMContentLoaded', function() {
    const deviceButtonsContainer = document.getElementById('device-buttons-container');
    const brandButtonsContainer = document.getElementById('brand-buttons-container');
    const modelButtonsContainer = document.getElementById('model-buttons-container');
    const partTypeButtonsContainer = document.getElementById('part-type-buttons-container');

    const deviceButtons = document.getElementById('device-buttons');
    const brandButtons = document.getElementById('brand-buttons');
    const modelButtons = document.getElementById('model-buttons');
    const partTypeButtons = document.getElementById('part-type-buttons');

    let selectedDevice = '';
    let selectedBrand = '';
    let selectedModel = '';
    let selectedPartType = '';

    function removeParenthesesText(text) {
    return text.replace(/\s*\(.*?\)\s*/g, ''); // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–∫–æ–±–∫–∞—Ö
}


    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    fetch('/get-devices/')
        .then(response => response.json())
        .then(data => {
            populateButtons(deviceButtons, data.devices, handleDeviceClick);
        });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    function handleDeviceClick(device) {
        selectedDevice = device;

        // –°–±—Ä–æ—Å –±—Ä–µ–Ω–¥–æ–≤, –º–æ–¥–µ–ª–µ–π –∏ —Ç–∏–ø–æ–≤ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        selectedBrand = '';
        selectedModel = '';
        selectedPartType = '';

        brandButtons.innerHTML = '';  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –±—Ä–µ–Ω–¥–æ–≤
        modelButtons.innerHTML = '';  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ–ª–µ–π
        partTypeButtons.innerHTML = '';  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —Ç–∏–ø–æ–≤ –∑–∞–ø—á–∞—Å—Ç–µ–π
        modelButtonsContainer.style.display = 'none';
        partTypeButtonsContainer.style.display = 'none';

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±—Ä–µ–Ω–¥—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        fetch(`/get-brands/?device=${device}`)
            .then(response => response.json())
            .then(data => {
                brandButtonsContainer.style.display = 'block';
                populateButtons(brandButtons, data.brands, handleBrandClick);
            });

        setActiveButton(deviceButtons, device);
        updateTable();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –±—Ä–µ–Ω–¥
    function handleBrandClick(brand) {
        selectedBrand = brand;

        // –°–±—Ä–æ—Å –º–æ–¥–µ–ª–µ–π –∏ —Ç–∏–ø–æ–≤ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–∞
        selectedModel = '';
        selectedPartType = '';

        modelButtons.innerHTML = '';  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –º–æ–¥–µ–ª–µ–π
        partTypeButtons.innerHTML = '';  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —Ç–∏–ø–æ–≤ –∑–∞–ø—á–∞—Å—Ç–µ–π
        partTypeButtonsContainer.style.display = 'none';

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –±—Ä–µ–Ω–¥–∞
        fetch(`/get-models/?device=${selectedDevice}&brand=${brand}`)
            .then(response => response.json())
            .then(data => {
                modelButtonsContainer.style.display = 'block';
                populateButtons(modelButtons, data.models, handleModelClick, true);
            });

        setActiveButton(brandButtons, brand);
        updateTable();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –º–æ–¥–µ–ª—å
    function handleModelClick(model) {
        selectedModel = model;

        // –°–±—Ä–æ—Å —Ç–∏–ø–æ–≤ –∑–∞–ø—á–∞—Å—Ç–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏
        selectedPartType = '';

        partTypeButtons.innerHTML = '';  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —Ç–∏–ø–æ–≤ –∑–∞–ø—á–∞—Å—Ç–µ–π

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø—ã –∑–∞–ø—á–∞—Å—Ç–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –±—Ä–µ–Ω–¥–∞ –∏ –º–æ–¥–µ–ª–∏
        fetch(`/get-part-types/?device=${selectedDevice}&brand=${selectedBrand}&model=${model}`)
            .then(response => response.json())
            .then(data => {
                partTypeButtonsContainer.style.display = 'block';
                populateButtons(partTypeButtons, data.part_types, handlePartTypeClick, true);
            });

        setActiveButton(modelButtons, model);
        updateTable();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–∏–ø –∑–∞–ø—á–∞—Å—Ç–∏
    function handlePartTypeClick(partType) {
        selectedPartType = partType;

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–ø—á–∞—Å—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –±—Ä–µ–Ω–¥–∞, –º–æ–¥–µ–ª–∏ –∏ —Ç–∏–ø–∞ –∑–∞–ø—á–∞—Å—Ç–∏
        fetch(`/get-parts/?device=${selectedDevice}&brand=${selectedBrand}&model=${selectedModel}&part_type=${partType}`)
            .then(response => response.json())
            .then(data => {
                displayParts(data.parts);  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–ø—á–∞—Å—Ç–µ–π
            });

        setActiveButton(partTypeButtons, partType);
    }

    function populateButtons(container, items, clickHandler, isCompact = false) {
        container.innerHTML = '';  // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        items.sort((a, b) => a.localeCompare(b));

        items.forEach(item => {
            const button = document.createElement('button');
            button.classList.add('btn', 'btn-primary', 'me-2', 'mb-2');  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫

            if (isCompact) {
                button.classList.add('btn-compact');  // –î–æ–±–∞–≤–ª—è–µ–º 'btn-compact' –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–æ–¥–µ–ª–µ–π –∏ —Ç–∏–ø–æ–≤ –∑–∞–ø—á–∞—Å—Ç–µ–π
            }

            button.textContent = removeParenthesesText(item); // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–∫–æ–±–∫–∞—Ö
            button.addEventListener('click', () => clickHandler(item));
            container.appendChild(button);
        });
    }


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ (–ø–æ–¥—Å–≤–µ—á–∏–≤–∞–Ω–∏–µ)
    function setActiveButton(container, selectedItem) {
        Array.from(container.children).forEach(button => {
            button.classList.remove('btn-active');
            button.classList.add('btn-primary');
        });

        const selectedButton = Array.from(container.children).find(button => button.textContent === selectedItem);
        if (selectedButton) {
            selectedButton.classList.remove('btn-primary');
            selectedButton.classList.add('btn-active');
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–ø—á–∞—Å—Ç—è–º–∏
    function updateTable() {
        fetch(`/get-parts/?device=${selectedDevice}&brand=${selectedBrand}&model=${selectedModel}&part_type=${selectedPartType}`)
            .then(response => response.json())
            .then(data => {
                displayParts(data.parts);
            });
    }


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—á–∞—Å—Ç–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
function displayParts(parts) {
    const tbody = document.querySelector('#parts-table-body');
    tbody.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã

    parts.forEach(part => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${removeParenthesesText(part.device)}</td>
            <td>${removeParenthesesText(part.brand)}</td>
            <td>${removeParenthesesText(part.model)}</td>
            <td>${removeParenthesesText(part.part_type)}</td>
            <td>
                <div>
                    <strong>–¶–≤–µ—Ç:</strong> ${part.color || '–ù–µ —É–∫–∞–∑–∞–Ω'} |
                    <strong>–¶–µ–Ω–∞:</strong> ${part.price} |
                    <strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</strong> ${part.quantity}
                </div>
                <div>
                    ${part.condition ? `<strong>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</strong> ${part.condition}` : ''}
                    ${part.note ? `<strong>, –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> ${part.note}</span>` : '<strong>, –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong><span> –ù–µ—Ç –ø—Ä–∏–º–µ—á–∞–Ω–∏–π</span>'}
                </div>
            </td>
            <td>
                ${part.images.length ? `
                    <a href="#" data-bs-toggle="modal" data-bs-target="#imageModal-${part.id}">
                        <img src="${part.images[0].image_url}" alt="${part.model}" class="img-thumbnail" style="max-width: 80px; max-height: 80px;">
                    </a>
                ` : '–ù–µ—Ç —Ñ–æ—Ç–æ'}
            </td>
            <td>
                <a href="/edit-part/${part.id}/" class="btn btn-warning btn-sm mb-1">‚úèÔ∏è</a>
                <a href="/delete-part/${part.id}/" class="btn btn-danger btn-sm">üóëÔ∏è</a>
            </td>
        `;

        tbody.appendChild(row);

        // –ï—Å–ª–∏ —É –∑–∞–ø—á–∞—Å—Ç–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (part.images.length) {
            const modalHtml = `
                <div class="modal fade" id="imageModal-${part.id}" tabindex="-1" aria-labelledby="imageModalLabel-${part.id}" aria-hidden="true">
                    <div class="modal-dialog modal-lg modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-body">
                                <!-- –ö–∞—Ä—É—Å–µ–ª—å -->
                                <div id="carouselPartImages-${part.id}" class="carousel slide" data-bs-ride="carousel">
                                    <div class="carousel-inner">
                                        ${part.images.map((image, index) => `
                                            <div class="carousel-item ${index === 0 ? 'active' : ''}">
                                                <img src="${image.image_url}" class="d-block w-100" alt="${part.model}" style="max-height: 500px; object-fit: contain;">
                                            </div>
                                        `).join('')}
                                    </div>
                                    <!-- –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ -->
                                    <button class="carousel-control-prev" type="button" data-bs-target="#carouselPartImages-${part.id}" data-bs-slide="prev">
                                        <span class="carousel-control-prev-icon" aria-hidden="true" style="background-color: black; padding: 10px;"></span>
                                        <span class="visually-hidden">–ü—Ä–µ–¥—ã–¥—É—â–∏–π</span>
                                    </button>
                                    <button class="carousel-control-next" type="button" data-bs-target="#carouselPartImages-${part.id}" data-bs-slide="next">
                                        <span class="carousel-control-next-icon" aria-hidden="true" style="background-color: black; padding: 10px;"></span>
                                        <span class="visually-hidden">–°–ª–µ–¥—É—é—â–∏–π</span>
                                    </button>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">–ó–∞–∫—Ä—ã—Ç—å</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ –∫–æ–Ω–µ—Ü —Ç–µ–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            document.body.insertAdjacentHTML('beforeend', modalHtml);
        }
    });
}



});
